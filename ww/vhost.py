#!/usr/bin/env python
#
# name:             vhost.py
# author:           Harold Bradley III
# email:            harold@bradleystudio.net
# created on:       11/03/2014
#
# description:      A class to create Apache vhost configurations.
#
#                   TODO: add SSL capabilities

import os
import re
import shutil

# Defaults
SITE_ADMIN_EMAIL = 'hosting@mediamarketers.com'
SITE_ERROR_LOG = 'error.log'
SITE_ACCESS_LOG = 'access.log'

DEFAULT_VHOST_DIR = '/etc/apache2/sites-available/'
VHOST_TEMPLATE = os.path.dirname(os.path.realpath(__file__)) + 'vhost.template'

# OS commands
RESTART_APACHE = 'sudo service apache2 restart'
ENABLE_CONFIG = 'sudo a2ensite '
DISABLE_CONFIG = 'sudo a2dissite '


# Vhost()
#   A class that describes an Apache vhost configuration.
#   This is primarily a wrapper for vhost managment.
#
#   methods:
#       create()
#       remove(ask)
#       enable(ask)
#       disable(ask)
#       restart(ask)
#       verify()
class Vhost(File):

        # ACTUALLY, remove this class. Create a replace() function in file
        # take the restart/apache stuff and move to site
        # hmmm... Im not convinced.
    
    def create(self, atts):
        if self.exists():
            print self.name + ' already exists.'
            if not prompt('Overwrite existing file?'):
                return

        print 'Creating site vhost config for "' + self.domain + '"...'

        shutil.copy(VHOST_TEMPLATE, self.vhost_conf)

        # Read the template file
        with open(self.vhost_conf, 'r') as f:
            templatedata = f.read()

        # Fill out the template
        data = templatedata.replace("#WEBSITE#", atts['domain'])
        data = templatedata.replace("#HTDOCS#", atts['htdocs'])
        data = templatedata.replace("#EMAIL#", SITE_ADMIN_EMAIL)
        data = templatedata.replace("#ACCESS_LOG#", atts['logs'] + SITE_ACCESS_LOG)
        data = templatedata.replace("#ERROR_LOG#", atts['logs'] + SITE_ERROR_LOG)

        # Write the processed data
        with open(self.vhost_conf, 'w') as f:
            f.write(data)

    def remove(self, ask = True):
        if not ask or prompt('Remove "' + self.vhost_conf + '"?'):
            self.disable()
            print 'Removing site apache config for "' + domain + '"...'
            os.system(DISABLE_CONFIG + self.domain)
            with ignored(OSError):
                os.remove(config_file)

    def verify(self, repair = False):
        #run parent varify
        # Check if domain is enabled
        pass

    def repair(self):
        self.verify(True)

    def parse(self):
        # Read vhost config file
        with open(self.vhost_conf, 'r') as f:
            vhost_data = f.read()

        # If this site was generated by this script, return none and trust the
        # defaults.
        if vhost_data.find('::Site::') != -1:
            print 'Site was stamped as being compatible with this script. Using defaults.'
            return None

        try:
            htdocs = re.findall('DocumentRoot (.*)', vhost_data)[0]
            print 'Found document root: ' + htdocs
        except Exception as e:
            print e
            print 'Could not find "DocumentRoot" in ' + self.path
            return None

        try:
            logs = re.findall('ErrorLog ([^ \n]*)', vhost_data)[0].rsplit('/', 1)[0]
            print 'Found logs directory: ' + logs
            # Ignore log dirs that have bash vars
            if logs.find('$') != -1:
                logs = None
        except Exception as e:
            print e
            print 'Could not find "ErrorLog" in ' + self.path
            # Just continue

        # Reset
        atts = { 'assets'   : { 'path' : None }, 'htaccess' : { 'path' : None } }
        atts['htdocs'] = { 'path' : htdocs }
        atts['logs'] = { 'path' : logs }
        return atts


    def enable(self, ask = True):
        if not ask or prompt('Enable domain in apache?'):
            os.system(ENABLE_CONFIG + self.domain)

    def disable(self, ask = True):
        if not ask or prompt('Enable domain in apache?'):
            os.system(ENABLE_CONFIG + self.domain)
